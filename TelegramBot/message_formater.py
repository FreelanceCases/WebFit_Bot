from database_package import database as DB

# –¢–∞–∫, —è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ç—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –†–£–ö–û–í–û–î–°–¢–í–û: –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç parseMode="HTML"
# –°–¥–µ–ª–∞–Ω–æ —ç—Ç–æ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç
# –ü–ª—é—Å–æ–º —Ä–µ—à–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥—Ö–æ–¥–æ–≤ (–ü—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è none, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è)





numbers_emoji = ('1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü')
max_length = 50


# –°–¥–µ–ª–∞–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class _cycle:
    def __init__(self, number, color):
        self.number = number,
        self.color = color


class exercise:
    def __init__(self, title, weight,t, cycles=[]):
        self.weight = weight,
        self.title = title,
        self.cycles = cycles,
        self.t = t


def isVideoNeeded(color):
    return color is not None and color == 7



def get_training_message_data(number="79164009726"):
    query = f"SELECT * FROM f{number}"
    cursor = DB.Con()
    cursor.execute(query)
    return cursor.fetchall()


def get_training_number(chat_id):
    query = f"SELECT * FROM mishabot WHERE chat_id=\'{chat_id}\'"
    cursor = DB.Con()
    cursor.execute(query)
    arr = cursor.fetchall()
    return arr[0][5]




def training_message_data_formatter_v2(data):
    result = []
    print(data)
    for ex in data:
        result.append(
            exercise(
                title=ex[0],
                weight=ex[1],
                cycles=[
                    _cycle(ex[2], ex[3]),
                    _cycle(ex[4], ex[5]),
                    _cycle(ex[6], ex[7]),
                    _cycle(ex[8], ex[9]),
                    _cycle(ex[10], ex[11]),
                    _cycle(ex[12], ex[13]),
                    _cycle(ex[14], ex[15]),
                    _cycle(ex[16], ex[17]),
                ],
                t=ex[18]
            )
        )
    return result




def training_message(number, exercises, first, last):
    print(first, last)
    result = f"<b>–¢–†–ï–ù–ò–†–û–í–ö–ê ‚Ññ{str(number)}</b>\n\n"
    result += str(first).upper() + "\n\n"
    index = 0
    for ex in exercises:
        if ex.t[0] == 'c':
            if ex.title[0] != 'f':
                result += numbers_emoji[index]
                result += f' <b>{str(ex.title[0]).upper()}</b>\n'
                if ex.weight is not None:
                    result += f'<b>–≤–µ—Å - {str(ex.weight[0])} –∫–≥</b>\n\n'
                i = 0
                for cycle in ex.cycles[0]:
                    if cycle.number[0] is not None and int(cycle.number[0]) >= 0:
                        if cycle.number[0] is not None:
                            if isVideoNeeded(cycle.color) is False:
                                result += f'{i + 1} –ø–æ–¥—Ö–æ–¥ - {str(cycle.number[0])} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π \n'
                            else:
                                result += f'{i + 1} –ø–æ–¥—Ö–æ–¥ - {str(cycle.number[0])} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π  \n<b>–°–ù–Ø–¢–¨ –í–ò–î–ï–û</b>\n'
                    else:
                        if cycle.number[0] is not None:
                            if isVideoNeeded(cycle.color) is False:
                                result += f'{i + 1} –ø–æ–¥—Ö–æ–¥ - {str(cycle.number[0])[1::]} + –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π \n'
                            else:
                                result += f'{i + 1} –ø–æ–¥—Ö–æ–¥ - {str(cycle.number[0])[1::]} + –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π  \n<b>–°–ù–Ø–¢–¨ –í–ò–î–ï–û</b>\n'
                    i += 1
                result += '\n\n'
        elif ex.t[0] == 'p':
            if ex.title[0] != 'f':
                result += numbers_emoji[index]
                result += f' <b>{str(ex.title[0]).upper()}</b>\n'
                i = 0
                for cycle in ex.cycles[0]:
                    if cycle.number[0] is not None:

                        if cycle.number[0] is not None and int(cycle.number[0]) >= 0:
                            result += f'{i+1} –ø–æ–¥—Ö–æ–¥ - {str(cycle.number[0])} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π  <b>–°–ù–Ø–¢–¨ –í–ò–î–ï–û</b>  \n ' \
                                      f'<b>–≤–µ—Å - {str(cycle.color)} –∫–≥</b>\n'
                        else:
                            result += f'{i + 1} –ø–æ–¥—Ö–æ–¥ - {str(cycle.number[0])} + –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π  <b>–°–ù–Ø–¢–¨ –í–ò–î–ï–û</b>  \n ' \
                                      f'<b>–≤–µ—Å - {str(cycle.color)} –∫–≥</b>\n'
                        i += 1
                result += '\n\n'
        index += 1
    result += str(last).upper()
    # result = result.replace('\n', '\r\n')
    # output = ""
    # for x in result.split('\r'):
    #     spaces = (max_length - len(x))//2
    #     x = ' '*spaces + x + ' '*spaces
    #     output += x
    # print(output)
    # result = "".join(result)
    return result

